1. terraform definition
2. Advantages of terraform
3. resources

                    ----commands---

                    terraform init

                    terraform plan

                    terraform validate

                    terraform apply | terraform apply -auto-approve

                    terraform destroy -auto-approve

                    terraform refresh

                    terraform reconfigure



                    -----------------------------

4. Variable preferrence
    1. command line variable   $ terraform apply -var "var_name=var_value"
    2. tfvars
    3. environment variables
                $ export TF_VAR_var_name
                $ unset TF_VAR_var_name
    4. default
    5. user prompt ( this means, if it did not find the variable value, it will ask at the command prompt)


5. terraform.tfvars =>>>>>> It will help you to override the variable defined value in the file.

6. conditions    ==> expression ? TRUE : FALSE

7. count

8. output

9. Interpolation ==> concatinating the two strings in terraform

10. functions
        ==> join()
        ==> split
        ==> element()
        ==> lookup()
        ==> length()
        ==> merge()

11. Data sources  ==> used to query existing information from the provider
                  ==> it will pick the data dynamically during the run time [ pick the AMI ID from the existing resources]
12. locals ==>  locals block can't be override the tfvars
                ==> it can store the expressions too

13. state management

    => terraform is doing here declared/desired infra and actual infra
    
    desired/declared infra: It has been written all the .tf files and whatever user write in tf files, that is what user wants.
    actual infra: what terraform is createing in provider

    It always lokkup the [ desired/declared infra = actual infra ]
    it always comare with state file and it will work accordingly resource creation

    terraform.tfstate: It is the file terraform creates to know what it is created. this is actual infra created by terraform

14. remote state management
        =>  Its important file and we need to secure it. and it Should be centralized.
        
        Advantages
        ---------->
        In collaboration environment, we must maintain state file remotely.
        Locking also important so that we prevent parellel executions

        Solution
        -------->
        To place the satefile in AWS S3
        For locking, we have to use DynamoDB

15. Daynamic Blocks
        ==>  It is used to create multiple blocks inside the resources.

16. for_each loop:
        ==> mysql=t3.small
        backend=t3.micro
        frontend=t3.micro


count => iterate lists []
for_each => map
dynamic blocks
